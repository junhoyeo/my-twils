{
  "id": 2,
  "summary": "OpenCV로 눈 감김 여부(깜빡임) 인식하기",
  "start_date": "2019-04-22",
  "end_date": "2019-04-28",
  "twils": [
    {
      "type": "string",
      "text": "웹캠을 통해 사용자가 눈을 감고 있는지 인식하려면 어떻게 해야 할까?",
      "twils": [
        {
          "type": "string",
          "text": "얼굴이나 신체 특정 부위(위치)를 인식하는 것은 [하르 유사 특징](https://en.wikipedia.org/wiki/Haar-like_feature)을 이용하는 [haarcascade 학습 데이터](https://github.com/opencv/opencv/tree/master/data/haarcascades)를 사용해서 쉽게 구현할 수 있다."
        },
        {
          "type": "string",
          "text": "그런데 눈이 감겼는지를 알려면 **눈꺼풀 사이의 간격(eye aspect ratio)**을 알아야 한다. 즉 haarcascade보다 더 자세한 정보를 인식할 수 있는 모델이 필요하다. 파이썬에서는 `dlib`에서 facial landmark predictor를 불러와 **얼굴의 특징점(facial landmark)**을 가져올 수 있다. [eye-blink-detection-demo](https://github.com/mans-men/eye-blink-detection-demo) 같은 프로젝트를 확인해 보면 된다."
        },
        {
          "type": "string",
          "text": "`dist.euclidean`으로 눈의 가로/세로 특징점 간 거리를 계산해서 eye aspect ratio를 구하고, 그 값이 일정 임계값을 초과하는 경우에 감긴 것으로 인식하면 된다. 임계값은 사람마다 조금씩 다른 것 같던데, 처음 유틸리티를 사용할 때 *'띠 소리가 들릴 때까지 눈을 감아 보세요/떠 보세요'* 등의 테스트를 실행해, 자동으로 임계치를 구해주면 좋을 것 같다."
        },
        {
          "type": "string",
          "text": "한 화면에서 여러 명의 얼굴이 발견된다면 어떻게 해야 할까? 중심이 되는 한 명만 인식해야 하는 상황에서 여러 얼굴이 발견된 경우, 첫 번째로 발견된 결과를 사용하거나, **그 면적이 가장 큰 결과**를 사용할 수 있겠다. ~~머리 큰 놈~~ 임시로 전자의 방법을 사용했는데, 테스트 중 갑자기 다른 친구의 얼굴이 뒤에 나타나면 포커스가 옮겨지는 경우가 발생했다. 웹캠을 이용한 인식이기 때문에 후자의 방법이 더 안전해 보인다."
        },
        {
          "type": "string",
          "text": "또 몸을 약간 비틀거나 고개를 한쪽으로 기울어 각도를 다르게 하면 제대로 인식되지 않는 경우가 발생한다. 회전을 감지해서 똑바로 돌려서 다시 인식하거나 하는 등의 방법으로 해결이 가능하지 않을까 싶다."
        }
      ]
    }
  ]
}
